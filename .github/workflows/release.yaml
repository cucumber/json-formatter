name: Release

on:
  push:
    branches: [release/*]

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
      - run: make
      - uses: cucumber/action-get-versions@v1.0.0
        id: versions
      - run: gh release create v${{ steps.versions.outputs.changelog-latest-version }} go/dist/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      latest-release: ${{ steps.versions.outputs.changelog-latest-version }}

  docker:
    name: Publish docker images
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Download binaries
        id: download
        run: |
          gh release download -D /tmp/binaries -R ${{ github.repository }} v${{ needs.release.outputs.latest-release }} 
          
          echo ::set-output name=binary-directory::/tmp/binaries
          
          echo "::group::Downloaded"
          ls -al /tmp/binaries
          echo "::endgroup::"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v1

      - uses: docker/setup-buildx-action@v1

      - uses: docker/metadata-action@v4
        id: meta
        with:
          tags: |
            type=semver,value=${{ needs.release.outputs.latest-release }},pattern={{major}}.{{minor}}.{{patch}}
            type=semver,value=${{ needs.release.outputs.latest-release }},pattern={{major}}.{{minor}}
            type=semver,value=${{ needs.release.outputs.latest-release }},pattern={{major}}
          images: ${{ github.repository }}

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        with:
          context: "{{defaultContext}}:docker"
          push: true
          platforms: |
            linux/386
            linux/arm
            linux/amd64
            linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-contexts: |
            binaries=${{ steps.download.outputs.binary-directory }}
